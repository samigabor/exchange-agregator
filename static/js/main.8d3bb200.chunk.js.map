{"version":3,"sources":["helpers/format-price.js","components/Coin/Coin.jsx","components/Coins/Coins.jsx","components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["formatPrice","price","decimals","currency","decimalPrice","Number","toFixed","Coin","props","className","ticker","toLowerCase","name","showBalance","balance","Button","variant","size","onClick","refreshPrice","id","Coins","type","placeholder","onChange","filterCoins","coins","map","Header","Navbar","bg","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","FormCheck","checked","handleShowBalance","label","api","App","useState","setShowBalance","initialCoins","setInitialCoins","setCoins","getCoinById","coinId","fetch","then","response","json","updateCoinPrices","a","topCoins","slice","restCoins","Promise","all","coin","prices","updatedCoins","index","price_usd","coinData","newCoin","componentDidMount","data","symbol","catch","err","console","log","useEffect","length","amount","event","keyword","target","value","trim","filteredCoins","filter","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d3bb200.chunk.js","sourcesContent":["export default function formatPrice(price, decimals = 2, currency = '$') {\r\n  const decimalPrice = Number(price).toFixed(decimals);\r\n  return `${currency}${decimalPrice}`;\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport formatPrice from '../../helpers/format-price';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Coin.css';\r\nimport './btc.svg';\r\n\r\nexport default function Coin(props) {\r\n  return (\r\n    <tr>\r\n      <td className=\"d-flex align-items-center\">\r\n        <div className=\"d-flex justify-content-center align-items-center coin-icon-container\">\r\n          <i className={`crypto crypto-${props.ticker.toLowerCase()}`}></i>\r\n        </div>\r\n        <div className=\"text-left\">\r\n          <p className=\"coin-ticker\">{ props.ticker }</p>\r\n          <p className=\"coin-name\">{ props.name }</p>\r\n        </div>\r\n      </td>\r\n\r\n      { props.showBalance ? <td>{ props.balance }</td> : null }\r\n\r\n      <td>{ formatPrice(props.price) }</td>\r\n      \r\n      <td>\r\n        <Button variant=\"info\"  size=\"sm\" onClick={() => props.refreshPrice(props.id)}>\r\n          Refresh\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nCoin.propTypes = {\r\n  id: PropTypes.string,\r\n  name: PropTypes.string,\r\n  ticker: PropTypes.string,\r\n  balance: PropTypes.number,\r\n  price: PropTypes.number\r\n}\r\n","import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport './Coins.css';\r\n\r\nexport default function Coins(props) {\r\n  return (\r\n    <>\r\n      <div className=\"search-container\">\r\n        <input type=\"text\" className=\"search-input\" placeholder=\"Search\" onChange={props.filterCoins} />\r\n      </div>\r\n      <div className=\"coins-container\">\r\n      <table>\r\n        <tbody>\r\n          { props.coins.map(({id, name, ticker, balance, price}) =>\r\n            <Coin\r\n              id={id}\r\n              name={name}\r\n              ticker={ticker}\r\n              balance={balance}\r\n              price={price}\r\n              key={id}\r\n              showBalance={props.showBalance}\r\n              refreshPrice={props.refreshPrice}\r\n            />)\r\n          }\r\n        </tbody>\r\n      </table>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport FormCheck from 'react-bootstrap/FormCheck';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport './Header.css';\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#home\">Agregator</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"#home\">Home</Nav.Link>\r\n          {/* <Nav.Link href=\"#convertor\">Convertor</Nav.Link> */}\r\n          {/* <Nav.Link href=\"#portfolio\">Portfolio</Nav.Link>\r\n          <Nav.Link href=\"#history\">History</Nav.Link> */}\r\n        </Nav>\r\n        <Nav>\r\n          <FormCheck \r\n            id=\"switchBalance\"\r\n            type=\"switch\"\r\n            checked={props.showBalance}\r\n            onChange={props.handleShowBalance}\r\n            label=\"Balance\"\r\n          />\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Coins from './components/Coins/Coins';\r\nimport Header from './components/Header/Header';\r\nimport './App.css';\r\n\r\nconst api = 'https://api.coinpaprika.com/v1';\r\n\r\nfunction App() {\r\n  const [balance, setBalance] = useState(10000);\r\n  const [showBalance, setShowBalance] = useState(false);\r\n  const [initialCoins, setInitialCoins] = useState([]);\r\n  const [coins, setCoins] = useState([]);\r\n\r\n  const toggleShowBalance = () => {\r\n    setShowBalance(!showBalance);\r\n  }\r\n\r\n  const getAllCoins = () => {\r\n    return fetch(`${api}/coins`).then(response => response.json());\r\n  }\r\n\r\n  const getCoinById = (coinId) => {\r\n    return fetch(`${api}/ticker/${coinId}`).then(response => response.json());\r\n  }\r\n\r\n  const filterCoins = (event) => {\r\n    const keyword = event.target.value.trim().toLowerCase();\r\n    const filteredCoins = initialCoins.filter(coin => {\r\n      const coinText = `${coin.name.toLowerCase()} ${coin.ticker.toLowerCase()}`;\r\n      return coinText.includes(keyword);\r\n    });\r\n    setCoins(filteredCoins);\r\n  }\r\n\r\n  const updateCoinPrices = async (coins) => {\r\n    const topCoins = coins.slice(0, 10);\r\n    const restCoins = coins.slice(10);\r\n    const prices = await Promise.all(topCoins.map(coin => getCoinById(coin.id)));\r\n    const updatedCoins = topCoins.map((coin, index) => ({\r\n      ...coin,\r\n      price: Number(prices[index].price_usd)\r\n    }));\r\n    setCoins([...updatedCoins, ...restCoins]);\r\n  }\r\n  \r\n  const refreshPrice = async (coinId) => {\r\n    getCoinById(coinId).then(coinData => {\r\n      const updatedCoins = coins.map((coin) => {\r\n        const newCoin = { ...coin };\r\n        if (coin.id === coinId) {\r\n          newCoin.price = Number(coinData.price_usd);\r\n        }\r\n        return newCoin;\r\n      });\r\n      setCoins(updatedCoins);\r\n    });\r\n  }\r\n\r\n  const componentDidMount = async () => {\r\n    await getAllCoins().then(data => {\r\n      const topCoins = data.slice(0, 100).map(coin => ({\r\n        id: coin.id,\r\n        name: coin.name,\r\n        ticker: coin.symbol,\r\n        balance: 0,\r\n        price: 0\r\n      }));\r\n      setInitialCoins(topCoins);\r\n      setCoins(topCoins);\r\n      updateCoinPrices(topCoins);\r\n    })\r\n    .catch(err => console.log('Get all coins error:', err));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (initialCoins.length === 0) {\r\n      componentDidMount();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header\r\n        amount={balance}\r\n        showBalance={showBalance}\r\n        handleShowBalance={toggleShowBalance}\r\n      />\r\n      <Coins\r\n        coins={coins}\r\n        showBalance={showBalance}\r\n        refreshPrice={refreshPrice}\r\n        filterCoins={filterCoins}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}